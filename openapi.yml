openapi: "3.0.0"
info:
  title: "Leivalle API"
  description: "Use this API"
  version: "0.1"
  contact:
    name: "Leivalle API"
    url: "https://www.leivalle.org"
    email: "anton.rautio@gmail.com"
servers:
  - url: "https://api.sakko.app"
    description: "Production API"
paths:
  /fine:
    post:
      tags:
        - New fine
      summary: "Create new fines."
      description: "Create new fines to the database."
      operationId: CreateFines
      requestBody:
        description: Fine body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Fine"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: Fine created
                type: object
                $ref: "#/components/schemas/Fine"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /fine/search:
    get:
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Fine"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /fine/give:
    post:
      tags:
        - New fine
      summary: "Create new fines."
      description: "Create new fines to the database."
      operationId: CreateFines
      requestBody:
        description: Fine body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GivenFine"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: Fine created
                type: object
                $ref: "#/components/schemas/GivenFine"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /fine/{fine_id}:
    get:
      tags:
        - Read Fine
      summary: "Read fines."
      description: "Read fines from the database."
      operationId: ReadFines
      parameters:
        - name: fine_id
          in: path
          description: "**Fine id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: Fine found
                type: object
                $ref: "#/components/schemas/Fine"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Update fines
      summary: "Update fines."
      description: "Update fines in the database."
      operationId: UpdateFines
      parameters:
        - name: fine_id
          in: path
          description: "**Fine id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      requestBody:
        description: Fine body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Fine"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: Fine updated
                type: object
                $ref: "#/components/schemas/Fine"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - Delete fines
      summary: "Delete fines."
      description: "Delete fines from the database."
      operationId: DeleteFines
      parameters:
        - name: fine_id
          in: path
          description: "**Fine id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: Fine deleted
                type: object
                $ref: "#/components/schemas/Fine"
        404:
          $ref: "#/components/responses/NotFound"
  /user:
    post:
      tags:
        - New fine
      summary: "Create new userss."
      description: "Create new users to the database."
      operationId: CreateUsers
      requestBody:
        description: User body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: User created
                type: object
                $ref: "#/components/schemas/User"
        403:
          $ref: "#/components/responses/AlreadyExists"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /user/search:
    get:
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /user/{user_id}:
    get:
      tags:
        - Read User
      summary: "Read users."
      description: "Read users from the database."
      operationId: ReadUsers
      parameters:
        - name: user_id
          in: path
          description: "**User id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: User found
                type: object
                $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - Update users
      summary: "Update users."
      description: "Update users in the database."
      operationId: UpdateUsers
      parameters:
        - name: user_id
          in: path
          description: "**User id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      requestBody:
        description: User body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                title: User updated
                type: object
                $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
  /user/{user_id}/feed:
    get:
      parameters:
        - name: user_id
          in: path
          description: "**User id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GivenFineWithProps"
        404:
          $ref: "#/components/responses/NotFound"
  /user/{user_id}/given_fines:
    get:
      tags:
        - Get all fines given by user
      summary: "Get all fines given by user"
      operationId: GetFines
      parameters:
        - name: user_id
          in: path
          description: "**User id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GivenFine"
        404:
          $ref: "#/components/responses/NotFound"
  /user/{user_id}/received_fines:
    get:
      tags:
        - Get all received fines of user
      summary: "Get all received fines of user"
      operationId: GetFines
      parameters:
        - name: user_id
          in: path
          description: "**User id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GivenFine"
        404:
          $ref: "#/components/responses/NotFound"
  /user/{user_id}/user_groups:
    get:
      parameters:
        - name: user_id
          in: path
          description: "**User id** *Example: 1*"
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGroup"
        404:
          $ref: "#/components/responses/NotFound"
  /user_group:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserGroup"
      responses:
        200:
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/UserGroup"
        403:
          $ref: "#/components/responses/AlreadyExists"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /user_group/search:
    get:
      parameters:
        - in: query
          name: query
          required: true
          schema:
            type: string
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGroup"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /user_group/users/add:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UserGroupUsers"
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGroupUsersWithProps"
        403:
          $ref: "#/components/responses/AlreadyExists"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /user_group/users/delete:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UserGroupUsers"
      responses:
        200:
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserGroupUsersWithProps"
        403:
          $ref: "#/components/responses/AlreadyExists"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /user_group/{user_group_id}:
    get:
      parameters:
        - name: user_group_id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/UserGroup"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      parameters:
        - name: user_group_id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/UserGroup"
        404:
          $ref: "#/components/responses/NotFound"
  /user_group/{user_group_id}/users:
    get:
      parameters:
        - name: user_group_id
          in: path
          required: true
          schema:
            type: string
            minimum: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        404:
          $ref: "#/components/responses/NotFound"
  /login:
    post:
      requestBody:
        description: User login
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/BadRequest"
  /test:
    get:
      tags:
        - For testing purposes
      summary: "For testing purposes"
      operationId: TestOne
      responses:
        200:
          content:
            text/plain:
              schema:
                type: string
components:
  schemas:
    GivenFine:
      type: object
      properties:
        given_fine_id:
          type: integer
        receiver_user_id:
          type: integer
        giver_user_id:
          type: integer
        user_group_id:
          type: integer
        fine_id:
          type: integer
      required:
        - receiver_user_id
        - giver_user_id
        - user_group_id
        - fine_id
    GivenFineWithProps:
      type: object
      properties:
        given_fine_id:
          type: integer
        receiver_user:
          $ref: "#/components/schemas/User"
        giver_user:
          $ref: "#/components/schemas/User"
        user_group:
          $ref: "#/components/schemas/UserGroup"
        fine:
          $ref: "#/components/schemas/Fine"
      required:
        - given_fine_id
        - receiver_user
        - giver_user
        - user_group
        - fine
    UserGroupUsers:
      type: object
      properties:
        user_group_users_id:
          type: integer
        user_group_id:
          type: integer
        user_id:
          type: integer
      required:
        - user_group_id
        - user_id
    UserGroupUsersWithProps:
      type: object
      properties:
        user_group_users_id:
          type: integer
        user_group:
          $ref: "#/components/schemas/UserGroup"
        user:
          $ref: "#/components/schemas/User"
      required:
        - user_group_users_id
        - user_group
        - user
    Fine:
      type: object
      properties:
        fine_id:
          type: integer
        amount:
          type: integer
        description:
          type: string
      required:
        - amount
        - description
    User:
      type: object
      properties:
        user_id:
          type: integer
        email:
          type: string
        username:
          type: string
        password:
          type: string
        access_token:
          type: string
      required:
        - email
        - username
    UserGroup:
      type: object
      properties:
        user_group_id:
          type: integer
        user_group_name:
          type: string
      required:
        - user_group_name
    Error:
      type: object
      properties:
        status:
          type: integer
        message:
          type: string
      required:
        - status
        - message
    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        access_token:
          type: string
  responses:
    NotFound:
      description: The specified fine was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    AlreadyExists:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    BadRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
